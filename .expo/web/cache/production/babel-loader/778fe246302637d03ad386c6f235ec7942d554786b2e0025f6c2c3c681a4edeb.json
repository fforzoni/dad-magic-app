{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import axios from'axios';var TMDB_BASE_URL='https://api.themoviedb.org/3';var TMDB_API_KEY='462b797169ca3170f8971775670b86ac';var tmdbApi=axios.create({baseURL:TMDB_BASE_URL,params:{api_key:TMDB_API_KEY,language:'en-US'}});export var getGenres=function(){var _ref=_asyncToGenerator(function*(){try{var response=yield tmdbApi.get('/genre/movie/list');var genres=response.data.genres;var genresWithCount=yield Promise.all(genres.map(function(){var _ref2=_asyncToGenerator(function*(genre){try{var moviesResponse=yield tmdbApi.get('/discover/movie',{params:{with_genres:genre.id,page:1}});return _objectSpread(_objectSpread({},genre),{},{movieCount:moviesResponse.data.total_results});}catch(error){console.error(`Error getting count for genre ${genre.name}:`,error);return _objectSpread(_objectSpread({},genre),{},{movieCount:0});}});return function(_x){return _ref2.apply(this,arguments);};}()));return genresWithCount;}catch(error){console.error('Error fetching genres:',error);throw error;}});return function getGenres(){return _ref.apply(this,arguments);};}();export var getMoviesByGenre=function(){var _ref3=_asyncToGenerator(function*(genreId){var page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var limit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:20;try{var response=yield tmdbApi.get('/discover/movie',{params:{with_genres:genreId,sort_by:'popularity.desc',page:page,include_adult:false,include_video:false}});var limitedResults=response.data.results.slice(0,Math.min(limit,50));return limitedResults;}catch(error){console.error('Error fetching movies by genre:',error);throw error;}});return function getMoviesByGenre(_x2){return _ref3.apply(this,arguments);};}();export var getMovieDetails=function(){var _ref4=_asyncToGenerator(function*(movieId){try{var response=yield tmdbApi.get(`/movie/${movieId}`,{params:{append_to_response:'credits,videos,images'}});return response.data;}catch(error){console.error('Error fetching movie details:',error);throw error;}});return function getMovieDetails(_x3){return _ref4.apply(this,arguments);};}();export var searchMovies=function(){var _ref5=_asyncToGenerator(function*(query){var page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;try{var response=yield tmdbApi.get('/search/movie',{params:{query:query,page:page,include_adult:false}});return response.data.results;}catch(error){console.error('Error searching movies:',error);throw error;}});return function searchMovies(_x4){return _ref5.apply(this,arguments);};}();export var getPopularMovies=function(){var _ref6=_asyncToGenerator(function*(){var page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;try{var response=yield tmdbApi.get('/movie/popular',{params:{page:page}});return response.data.results;}catch(error){console.error('Error fetching popular movies:',error);throw error;}});return function getPopularMovies(){return _ref6.apply(this,arguments);};}();export var getTopRatedMovies=function(){var _ref7=_asyncToGenerator(function*(){var page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;try{var response=yield tmdbApi.get('/movie/top_rated',{params:{page:page}});return response.data.results;}catch(error){console.error('Error fetching top rated movies:',error);throw error;}});return function getTopRatedMovies(){return _ref7.apply(this,arguments);};}();export var getUpcomingMovies=function(){var _ref8=_asyncToGenerator(function*(){var page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;try{var response=yield tmdbApi.get('/movie/upcoming',{params:{page:page}});return response.data.results;}catch(error){console.error('Error fetching upcoming movies:',error);throw error;}});return function getUpcomingMovies(){return _ref8.apply(this,arguments);};}();export var getMovieById=function(){var _ref9=_asyncToGenerator(function*(movieId){try{var response=yield tmdbApi.get(`/movie/${movieId}`);return response.data;}catch(error){console.error(`Error fetching movie ${movieId}:`,error);return null;}});return function getMovieById(_x5){return _ref9.apply(this,arguments);};}();export var getMoviesByIds=function(){var _ref0=_asyncToGenerator(function*(movieIds){try{var moviePromises=movieIds.map(function(id){return getMovieById(id);});var movies=yield Promise.all(moviePromises);return movies.filter(function(movie){return movie!==null;});}catch(error){console.error('Error fetching movies by IDs:',error);return[];}});return function getMoviesByIds(_x6){return _ref0.apply(this,arguments);};}();","map":{"version":3,"names":["axios","TMDB_BASE_URL","TMDB_API_KEY","tmdbApi","create","baseURL","params","api_key","language","getGenres","_ref","_asyncToGenerator","response","get","genres","data","genresWithCount","Promise","all","map","_ref2","genre","moviesResponse","with_genres","id","page","_objectSpread","movieCount","total_results","error","console","name","_x","apply","arguments","getMoviesByGenre","_ref3","genreId","length","undefined","limit","sort_by","include_adult","include_video","limitedResults","results","slice","Math","min","_x2","getMovieDetails","_ref4","movieId","append_to_response","_x3","searchMovies","_ref5","query","_x4","getPopularMovies","_ref6","getTopRatedMovies","_ref7","getUpcomingMovies","_ref8","getMovieById","_ref9","_x5","getMoviesByIds","_ref0","movieIds","moviePromises","movies","filter","movie","_x6"],"sources":["/Users/francescaforzoni/Downloads/Dad_MagicApp_002/src/services/tmdbService.js"],"sourcesContent":["import axios from 'axios';\n\n// TMDB API Configuration\nconst TMDB_BASE_URL = 'https://api.themoviedb.org/3';\nconst TMDB_API_KEY = '462b797169ca3170f8971775670b86ac'; // Your actual API key\n\n// Create axios instance with base configuration\nconst tmdbApi = axios.create({\n  baseURL: TMDB_BASE_URL,\n  params: {\n    api_key: TMDB_API_KEY,\n    language: 'en-US',\n  },\n});\n\n// Get all movie genres\nexport const getGenres = async () => {\n  try {\n    const response = await tmdbApi.get('/genre/movie/list');\n    const genres = response.data.genres;\n    \n    // Get movie count for each genre (optional enhancement)\n    const genresWithCount = await Promise.all(\n      genres.map(async (genre) => {\n        try {\n          const moviesResponse = await tmdbApi.get('/discover/movie', {\n            params: {\n              with_genres: genre.id,\n              page: 1,\n            },\n          });\n          return {\n            ...genre,\n            movieCount: moviesResponse.data.total_results,\n          };\n        } catch (error) {\n          console.error(`Error getting count for genre ${genre.name}:`, error);\n          return { ...genre, movieCount: 0 };\n        }\n      })\n    );\n    \n    return genresWithCount;\n  } catch (error) {\n    console.error('Error fetching genres:', error);\n    throw error;\n  }\n};\n\n// Get movies by genre\nexport const getMoviesByGenre = async (genreId, page = 1, limit = 20) => {\n  try {\n    const response = await tmdbApi.get('/discover/movie', {\n      params: {\n        with_genres: genreId,\n        sort_by: 'popularity.desc',\n        page: page,\n        include_adult: false,\n        include_video: false,\n      },\n    });\n    \n    // Limit results to specified number (default 20, max 50)\n    const limitedResults = response.data.results.slice(0, Math.min(limit, 50));\n    return limitedResults;\n  } catch (error) {\n    console.error('Error fetching movies by genre:', error);\n    throw error;\n  }\n};\n\n// Get movie details by ID\nexport const getMovieDetails = async (movieId) => {\n  try {\n    const response = await tmdbApi.get(`/movie/${movieId}`, {\n      params: {\n        append_to_response: 'credits,videos,images',\n      },\n    });\n    \n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    throw error;\n  }\n};\n\n// Search movies\nexport const searchMovies = async (query, page = 1) => {\n  try {\n    const response = await tmdbApi.get('/search/movie', {\n      params: {\n        query: query,\n        page: page,\n        include_adult: false,\n      },\n    });\n    \n    return response.data.results;\n  } catch (error) {\n    console.error('Error searching movies:', error);\n    throw error;\n  }\n};\n\n// Get popular movies\nexport const getPopularMovies = async (page = 1) => {\n  try {\n    const response = await tmdbApi.get('/movie/popular', {\n      params: {\n        page: page,\n      },\n    });\n    \n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching popular movies:', error);\n    throw error;\n  }\n};\n\n// Get top rated movies\nexport const getTopRatedMovies = async (page = 1) => {\n  try {\n    const response = await tmdbApi.get('/movie/top_rated', {\n      params: {\n        page: page,\n      },\n    });\n    \n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching top rated movies:', error);\n    throw error;\n  }\n};\n\n// Get upcoming movies\nexport const getUpcomingMovies = async (page = 1) => {\n  try {\n    const response = await tmdbApi.get('/movie/upcoming', {\n      params: {\n        page: page,\n      },\n    });\n    \n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching upcoming movies:', error);\n    throw error;\n  }\n};\n\n// Get movie by specific ID\nexport const getMovieById = async (movieId) => {\n  try {\n    const response = await tmdbApi.get(`/movie/${movieId}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching movie ${movieId}:`, error);\n    return null;\n  }\n};\n\n// Get multiple movies by their IDs\nexport const getMoviesByIds = async (movieIds) => {\n  try {\n    const moviePromises = movieIds.map(id => getMovieById(id));\n    const movies = await Promise.all(moviePromises);\n    return movies.filter(movie => movie !== null);\n  } catch (error) {\n    console.error('Error fetching movies by IDs:', error);\n    return [];\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}