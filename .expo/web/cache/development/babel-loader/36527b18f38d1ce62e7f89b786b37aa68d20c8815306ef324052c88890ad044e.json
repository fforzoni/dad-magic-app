{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport io from 'socket.io-client';\nvar SocketService = function () {\n  function SocketService() {\n    _classCallCheck(this, SocketService);\n    this.socket = null;\n    this.isConnected = false;\n    this.roomId = null;\n    this.onMovieSelectedCallback = null;\n  }\n  return _createClass(SocketService, [{\n    key: \"connect\",\n    value: function connect() {\n      var _this = this;\n      var roomId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default-room';\n      try {\n        var SOCKET_SERVER_URL = 'http://192.168.1.99:3001';\n        this.socket = io(SOCKET_SERVER_URL, {\n          transports: ['websocket'],\n          autoConnect: true\n        });\n        this.roomId = roomId;\n        this.socket.on('connect', function () {\n          console.log('Connected to socket server');\n          _this.isConnected = true;\n          _this.socket.emit('join-room', {\n            roomId: _this.roomId\n          });\n          if (_this.onConnectCallback) {\n            _this.onConnectCallback();\n          }\n        });\n        this.socket.on('disconnect', function () {\n          console.log('Disconnected from socket server');\n          _this.isConnected = false;\n          if (_this.onDisconnectCallback) {\n            _this.onDisconnectCallback();\n          }\n        });\n        this.socket.on('error', function (error) {\n          console.error('Socket error:', error);\n        });\n        this.socket.on('movie-selected', function (data) {\n          console.log('Movie selected by another client:', data);\n          if (_this.onMovieSelectedCallback) {\n            _this.onMovieSelectedCallback(data.movie);\n          }\n        });\n        this.socket.on('room-joined', function (data) {\n          console.log('Joined room:', data.roomId);\n        });\n        this.socket.on('client-joined', function (data) {\n          console.log('Client joined room:', data.clientId);\n        });\n        this.socket.on('client-left', function (data) {\n          console.log('Client left room:', data.clientId);\n        });\n      } catch (error) {\n        console.error('Error connecting to socket server:', error);\n      }\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.socket) {\n        this.socket.disconnect();\n        this.socket = null;\n        this.isConnected = false;\n      }\n    }\n  }, {\n    key: \"selectMovie\",\n    value: function selectMovie(movie) {\n      if (this.socket && this.isConnected) {\n        var data = {\n          roomId: this.roomId,\n          movie: movie,\n          timestamp: Date.now(),\n          clientId: this.socket.id\n        };\n        this.socket.emit('select-movie', data);\n        console.log('Sent movie selection:', movie.title);\n      } else {\n        console.warn('Socket not connected. Cannot send movie selection.');\n      }\n    }\n  }, {\n    key: \"onMovieSelected\",\n    value: function onMovieSelected(callback) {\n      this.onMovieSelectedCallback = callback;\n    }\n  }, {\n    key: \"getConnectionStatus\",\n    value: function getConnectionStatus() {\n      return this.isConnected;\n    }\n  }, {\n    key: \"getRoomId\",\n    value: function getRoomId() {\n      return this.roomId;\n    }\n  }, {\n    key: \"changeRoom\",\n    value: function changeRoom(newRoomId) {\n      if (this.socket && this.isConnected) {\n        this.socket.emit('leave-room', {\n          roomId: this.roomId\n        });\n        this.roomId = newRoomId;\n        this.socket.emit('join-room', {\n          roomId: this.roomId\n        });\n        console.log('Changed to room:', newRoomId);\n      }\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(message) {\n      if (this.socket && this.isConnected) {\n        var data = {\n          roomId: this.roomId,\n          message: message,\n          timestamp: Date.now(),\n          clientId: this.socket.id\n        };\n        this.socket.emit('send-message', data);\n      }\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(callback) {\n      if (this.socket) {\n        this.socket.on('receive-message', callback);\n      }\n    }\n  }]);\n}();\nexport var socketService = new SocketService();","map":{"version":3,"names":["io","SocketService","_classCallCheck","socket","isConnected","roomId","onMovieSelectedCallback","_createClass","key","value","connect","_this","arguments","length","undefined","SOCKET_SERVER_URL","transports","autoConnect","on","console","log","emit","onConnectCallback","onDisconnectCallback","error","data","movie","clientId","disconnect","selectMovie","timestamp","Date","now","id","title","warn","onMovieSelected","callback","getConnectionStatus","getRoomId","changeRoom","newRoomId","sendMessage","message","onMessage","socketService"],"sources":["/Users/francescaforzoni/Downloads/Dad_MagicApp_002/src/services/socketService.js"],"sourcesContent":["import io from 'socket.io-client';\n\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.roomId = null;\n    this.onMovieSelectedCallback = null;\n  }\n\n  // Connect to the socket server\n  connect(roomId = 'default-room') {\n    try {\n      // Use the computer's IP address for network access\n      const SOCKET_SERVER_URL = 'http://192.168.1.99:3001';\n      \n      this.socket = io(SOCKET_SERVER_URL, {\n        transports: ['websocket'],\n        autoConnect: true,\n      });\n\n      this.roomId = roomId;\n\n      this.socket.on('connect', () => {\n        console.log('Connected to socket server');\n        this.isConnected = true;\n        \n        // Join the room\n        this.socket.emit('join-room', { roomId: this.roomId });\n        \n        // Call connect callback if set\n        if (this.onConnectCallback) {\n          this.onConnectCallback();\n        }\n      });\n\n      this.socket.on('disconnect', () => {\n        console.log('Disconnected from socket server');\n        this.isConnected = false;\n        \n        // Call disconnect callback if set\n        if (this.onDisconnectCallback) {\n          this.onDisconnectCallback();\n        }\n      });\n\n      this.socket.on('error', (error) => {\n        console.error('Socket error:', error);\n      });\n\n      // Listen for movie selection from other clients\n      this.socket.on('movie-selected', (data) => {\n        console.log('Movie selected by another client:', data);\n        if (this.onMovieSelectedCallback) {\n          this.onMovieSelectedCallback(data.movie);\n        }\n      });\n\n      // Listen for room join confirmation\n      this.socket.on('room-joined', (data) => {\n        console.log('Joined room:', data.roomId);\n      });\n\n      // Listen for other clients joining the room\n      this.socket.on('client-joined', (data) => {\n        console.log('Client joined room:', data.clientId);\n      });\n\n      // Listen for other clients leaving the room\n      this.socket.on('client-left', (data) => {\n        console.log('Client left room:', data.clientId);\n      });\n\n    } catch (error) {\n      console.error('Error connecting to socket server:', error);\n    }\n  }\n\n  // Disconnect from the socket server\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n\n  // Send movie selection to other clients in the room\n  selectMovie(movie) {\n    if (this.socket && this.isConnected) {\n      const data = {\n        roomId: this.roomId,\n        movie: movie,\n        timestamp: Date.now(),\n        clientId: this.socket.id,\n      };\n      \n      this.socket.emit('select-movie', data);\n      console.log('Sent movie selection:', movie.title);\n    } else {\n      console.warn('Socket not connected. Cannot send movie selection.');\n    }\n  }\n\n  // Set callback for when a movie is selected by another client\n  onMovieSelected(callback) {\n    this.onMovieSelectedCallback = callback;\n  }\n\n  // Get connection status\n  getConnectionStatus() {\n    return this.isConnected;\n  }\n\n  // Get current room ID\n  getRoomId() {\n    return this.roomId;\n  }\n\n  // Change room\n  changeRoom(newRoomId) {\n    if (this.socket && this.isConnected) {\n      // Leave current room\n      this.socket.emit('leave-room', { roomId: this.roomId });\n      \n      // Join new room\n      this.roomId = newRoomId;\n      this.socket.emit('join-room', { roomId: this.roomId });\n      \n      console.log('Changed to room:', newRoomId);\n    }\n  }\n\n  // Send custom message to room\n  sendMessage(message) {\n    if (this.socket && this.isConnected) {\n      const data = {\n        roomId: this.roomId,\n        message: message,\n        timestamp: Date.now(),\n        clientId: this.socket.id,\n      };\n      \n      this.socket.emit('send-message', data);\n    }\n  }\n\n  // Listen for custom messages\n  onMessage(callback) {\n    if (this.socket) {\n      this.socket.on('receive-message', callback);\n    }\n  }\n}\n\n// Export a singleton instance\nexport const socketService = new SocketService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}