{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { getGenres, getMoviesByGenre, searchMovies, getTopRatedMovies, getMovieDetails, getMoviesByIds } from \"../services/tmdbService\";\nimport { socketService } from \"../services/socketService\";\nimport MovieModal from \"../components/MovieModal\";\nimport { getPriorityMoviesByGenre } from \"../data/priorityMovies\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width;\nvar POSTER_WIDTH = 156;\nvar POSTER_HEIGHT = 234;\nexport default function HomeScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    genres = _useState2[0],\n    setGenres = _useState2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    moviesByGenre = _useState4[0],\n    setMoviesByGenre = _useState4[1];\n  var _useState5 = useState(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    selectedMovie = _useState8[0],\n    setSelectedMovie = _useState8[1];\n  var _useState9 = useState(false),\n    _useState0 = _slicedToArray(_useState9, 2),\n    modalVisible = _useState0[0],\n    setModalVisible = _useState0[1];\n  var _useState1 = useState(''),\n    _useState10 = _slicedToArray(_useState1, 2),\n    searchQuery = _useState10[0],\n    setSearchQuery = _useState10[1];\n  var _useState11 = useState([]),\n    _useState12 = _slicedToArray(_useState11, 2),\n    searchResults = _useState12[0],\n    setSearchResults = _useState12[1];\n  var _useState13 = useState(false),\n    _useState14 = _slicedToArray(_useState13, 2),\n    isSearching = _useState14[0],\n    setIsSearching = _useState14[1];\n  var _useState15 = useState([]),\n    _useState16 = _slicedToArray(_useState15, 2),\n    featuredMovies = _useState16[0],\n    setFeaturedMovies = _useState16[1];\n  useEffect(function () {\n    loadGenresAndMovies();\n    setupSocketConnection();\n    return function () {\n      socketService.disconnect();\n    };\n  }, []);\n  var setupSocketConnection = function setupSocketConnection() {\n    socketService.connect();\n    socketService.onMovieSelected(function (movie) {\n      console.log('Movie selected by customer:', movie);\n    });\n  };\n  var loadGenresAndMovies = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        setLoading(true);\n        try {\n          var topMovies = yield getTopRatedMovies(1, 50);\n          var allTimeTopMovies = topMovies.sort(function (a, b) {\n            return b.vote_average - a.vote_average;\n          }).slice(0, 10);\n          console.log('Loaded featured movies:', allTimeTopMovies.length, allTimeTopMovies.map(function (m) {\n            return m.title;\n          }));\n          setFeaturedMovies(allTimeTopMovies);\n        } catch (error) {\n          console.error('Error loading featured movies:', error);\n          setFeaturedMovies([]);\n        }\n        var genresData = yield getGenres();\n        setGenres(genresData);\n        var moviesData = {};\n        var usedMovieIds = new Set();\n        var filteredGenres = genresData.filter(function (genre) {\n          return genre.name !== 'Documentary' && genre.name !== 'TV Movie';\n        });\n        var priorityGenres = ['Action', 'Comedy', 'Drama', 'Thriller', 'Horror', 'Romance', 'Adventure', 'Sci-Fi', 'Family & Animation', 'Fantasy', 'Musical', 'Crime'];\n        var sortedGenres = _toConsumableArray(filteredGenres).sort(function (a, b) {\n          var aPriority = priorityGenres.indexOf(a.name);\n          var bPriority = priorityGenres.indexOf(b.name);\n          if (aPriority === -1 && bPriority === -1) return 0;\n          if (aPriority === -1) return 1;\n          if (bPriority === -1) return -1;\n          return aPriority - bPriority;\n        });\n        var familyGenre = filteredGenres.find(function (g) {\n          return g.name === 'Family';\n        });\n        var animationGenre = filteredGenres.find(function (g) {\n          return g.name === 'Animation';\n        });\n        if (familyGenre || animationGenre) {\n          try {\n            var priorityMoviesForGenre = getPriorityMoviesByGenre('Family & Animation');\n            var finalGenreMovies = [];\n            if (priorityMoviesForGenre.length > 0) {\n              var priorityMovieIds = priorityMoviesForGenre.map(function (movie) {\n                return movie.tmdbId;\n              });\n              var priorityMovies = yield getMoviesByIds(priorityMovieIds);\n              finalGenreMovies = priorityMovies;\n              priorityMovies.forEach(function (movie) {\n                return usedMovieIds.add(movie.id);\n              });\n            }\n            var allMovies = [];\n            if (familyGenre) {\n              var familyMovies = yield getMoviesByGenre(familyGenre.id, 1, 50);\n              allMovies = [].concat(_toConsumableArray(allMovies), _toConsumableArray(familyMovies));\n            }\n            if (animationGenre) {\n              var animationMovies = yield getMoviesByGenre(animationGenre.id, 1, 50);\n              allMovies = [].concat(_toConsumableArray(allMovies), _toConsumableArray(animationMovies));\n            }\n            var uniqueMovies = allMovies.filter(function (movie, index, self) {\n              return index === self.findIndex(function (m) {\n                return m.id === movie.id;\n              });\n            });\n            var remainingSlots = 50 - finalGenreMovies.length;\n            var additionalMovies = uniqueMovies.filter(function (movie) {\n              return !usedMovieIds.has(movie.id);\n            }).slice(0, remainingSlots);\n            finalGenreMovies = [].concat(_toConsumableArray(finalGenreMovies), _toConsumableArray(additionalMovies));\n            additionalMovies.forEach(function (movie) {\n              return usedMovieIds.add(movie.id);\n            });\n            moviesData['Family & Animation'] = finalGenreMovies;\n          } catch (error) {\n            console.error('Error loading Family & Animation movies:', error);\n            moviesData['Family & Animation'] = [];\n          }\n        }\n        for (var genre of sortedGenres) {\n          if (genre.name === 'Family' || genre.name === 'Animation') {\n            continue;\n          }\n          try {\n            var _priorityMoviesForGenre = getPriorityMoviesByGenre(genre.name);\n            var _finalGenreMovies = [];\n            if (_priorityMoviesForGenre.length > 0) {\n              var _priorityMovieIds = _priorityMoviesForGenre.map(function (movie) {\n                return movie.tmdbId;\n              });\n              var _priorityMovies = yield getMoviesByIds(_priorityMovieIds);\n              _finalGenreMovies = _priorityMovies;\n              _priorityMovies.forEach(function (movie) {\n                return usedMovieIds.add(movie.id);\n              });\n            }\n            var _allMovies = yield getMoviesByGenre(genre.id, 1, 100);\n            var _remainingSlots = 50 - _finalGenreMovies.length;\n            var _additionalMovies = _allMovies.filter(function (movie) {\n              return !usedMovieIds.has(movie.id);\n            }).slice(0, _remainingSlots);\n            _finalGenreMovies = [].concat(_toConsumableArray(_finalGenreMovies), _toConsumableArray(_additionalMovies));\n            _additionalMovies.forEach(function (movie) {\n              return usedMovieIds.add(movie.id);\n            });\n            moviesData[genre.id] = _finalGenreMovies;\n          } catch (error) {\n            console.error(`Error loading movies for genre ${genre.name}:`, error);\n            moviesData[genre.id] = [];\n          }\n        }\n        setMoviesByGenre(moviesData);\n      } catch (error) {\n        console.error('Error loading data:', error);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function loadGenresAndMovies() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleMoviePress = function handleMoviePress(movie) {\n    setSelectedMovie(movie);\n    setModalVisible(true);\n    socketService.selectMovie(movie);\n  };\n  var handleSearch = function () {\n    var _ref3 = _asyncToGenerator(function* (query) {\n      setSearchQuery(query);\n      if (query.trim().length === 0) {\n        setSearchResults([]);\n        setIsSearching(false);\n        return;\n      }\n      if (query.trim().length < 2) {\n        setSearchResults([]);\n        return;\n      }\n      setIsSearching(true);\n      try {\n        var results = yield searchMovies(query, 1);\n        setSearchResults(results);\n      } catch (error) {\n        console.error('Error searching movies:', error);\n        setSearchResults([]);\n      } finally {\n        setIsSearching(false);\n      }\n    });\n    return function handleSearch(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var renderMoviePoster = function renderMoviePoster(_ref4) {\n    var item = _ref4.item;\n    return _jsxs(TouchableOpacity, {\n      style: styles.moviePoster,\n      onPress: function onPress() {\n        return handleMoviePress(item);\n      },\n      activeOpacity: 0.7,\n      children: [_jsx(Image, {\n        source: {\n          uri: `https://image.tmdb.org/t/p/w500${item.poster_path}`\n        },\n        style: styles.posterImage,\n        resizeMode: \"cover\"\n      }), item.vote_average && _jsx(View, {\n        style: styles.ratingBadge,\n        children: _jsxs(Text, {\n          style: styles.ratingText,\n          children: [\"\\u2605 \", item.vote_average.toFixed(1)]\n        })\n      }), _jsx(View, {\n        style: styles.posterOverlay,\n        children: _jsx(Text, {\n          style: styles.movieTitle,\n          numberOfLines: 2,\n          children: item.title\n        })\n      })]\n    });\n  };\n  var renderGenreSection = function renderGenreSection(_ref5) {\n    var genre = _ref5.item;\n    var genreKey;\n    var displayName;\n    if (genre.name === 'Family' || genre.name === 'Animation') {\n      genreKey = 'Family & Animation';\n      displayName = 'Family & Animation';\n    } else {\n      genreKey = genre.id;\n      displayName = genre.name;\n    }\n    var movies = moviesByGenre[genreKey] || [];\n    if (movies.length === 0) return null;\n    return _jsxs(View, {\n      style: styles.genreSection,\n      children: [_jsxs(View, {\n        style: styles.genreHeader,\n        children: [_jsx(View, {\n          style: styles.genreTitleRow,\n          children: _jsx(Text, {\n            style: styles.genreTitle,\n            children: displayName\n          })\n        }), _jsxs(Text, {\n          style: styles.movieCount,\n          children: [movies.length, \" movies\"]\n        })]\n      }), _jsx(FlatList, {\n        data: movies,\n        renderItem: renderMoviePoster,\n        keyExtractor: function keyExtractor(movie) {\n          return movie.id.toString();\n        },\n        horizontal: true,\n        showsHorizontalScrollIndicator: false,\n        contentContainerStyle: styles.moviesRow,\n        snapToInterval: POSTER_WIDTH + 16,\n        decelerationRate: \"fast\"\n      })]\n    });\n  };\n  var renderFeaturedMovies = function renderFeaturedMovies() {\n    console.log('Rendering Featured Movies, featuredMovies length:', featuredMovies.length);\n    if (featuredMovies.length === 0) {\n      console.log('No featured movies to display');\n      return null;\n    }\n    return _jsxs(View, {\n      style: styles.featuredSection,\n      children: [_jsxs(View, {\n        style: styles.featuredHeader,\n        children: [_jsx(Text, {\n          style: styles.featuredTitle,\n          children: \"Featured Movies\"\n        }), _jsx(Text, {\n          style: styles.featuredSubtitle,\n          children: \"Top 10 Highest-Rated Films of All Time\"\n        })]\n      }), _jsx(FlatList, {\n        data: featuredMovies,\n        renderItem: renderMoviePoster,\n        keyExtractor: function keyExtractor(movie) {\n          return movie.id.toString();\n        },\n        horizontal: true,\n        showsHorizontalScrollIndicator: false,\n        contentContainerStyle: styles.moviesRow,\n        snapToInterval: POSTER_WIDTH + 16,\n        decelerationRate: \"fast\"\n      })]\n    });\n  };\n  if (loading) {\n    return _jsxs(View, {\n      style: styles.loadingContainer,\n      children: [_jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#007AFF\"\n      }), _jsx(Text, {\n        style: styles.loadingText,\n        children: \"Loading movies...\"\n      })]\n    });\n  }\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.imdbHeader,\n      children: [_jsx(Text, {\n        style: styles.imdbTitle,\n        children: \"IMBD\"\n      }), _jsxs(View, {\n        style: styles.searchContainer,\n        children: [_jsx(TextInput, {\n          style: styles.searchInput,\n          placeholder: \"Search movies...\",\n          placeholderTextColor: \"#999\",\n          value: searchQuery,\n          onChangeText: handleSearch,\n          autoCapitalize: \"none\",\n          autoCorrect: false\n        }), isSearching && _jsx(ActivityIndicator, {\n          size: \"small\",\n          color: \"#000\",\n          style: styles.searchSpinner\n        }), searchQuery.trim().length > 0 && searchResults.length > 0 && _jsx(View, {\n          style: styles.searchDropdownOverlay,\n          children: _jsx(View, {\n            style: styles.searchDropdown,\n            children: _jsx(FlatList, {\n              data: searchResults.slice(0, 8),\n              renderItem: function renderItem(_ref6) {\n                var item = _ref6.item;\n                return _jsxs(TouchableOpacity, {\n                  style: styles.searchResultItem,\n                  onPress: function onPress() {\n                    setSearchQuery('');\n                    setSearchResults([]);\n                    handleMoviePress(item);\n                  },\n                  children: [_jsx(Text, {\n                    style: styles.searchResultTitle,\n                    children: item.title\n                  }), _jsx(Text, {\n                    style: styles.searchResultYear,\n                    children: new Date(item.release_date).getFullYear()\n                  })]\n                });\n              },\n              keyExtractor: function keyExtractor(item) {\n                return item.id.toString();\n              },\n              showsVerticalScrollIndicator: false,\n              nestedScrollEnabled: true\n            })\n          })\n        })]\n      })]\n    }), _jsx(FlatList, {\n      data: ['featured'].concat(_toConsumableArray(genres)),\n      renderItem: function renderItem(_ref7) {\n        var item = _ref7.item,\n          index = _ref7.index;\n        if (item === 'featured') {\n          return renderFeaturedMovies();\n        }\n        return renderGenreSection({\n          item: item\n        });\n      },\n      keyExtractor: function keyExtractor(item, index) {\n        if (item === 'featured') return 'featured';\n        return item.id.toString();\n      },\n      showsVerticalScrollIndicator: false,\n      contentContainerStyle: styles.genresList,\n      onRefresh: loadGenresAndMovies,\n      refreshing: loading\n    }), _jsx(MovieModal, {\n      visible: modalVisible,\n      movie: selectedMovie,\n      onClose: function onClose() {\n        setModalVisible(false);\n        setSelectedMovie(null);\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0a0a0a'\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#0a0a0a'\n  },\n  loadingText: {\n    color: '#fff',\n    marginTop: 16,\n    fontSize: 16\n  },\n  imdbHeader: {\n    backgroundColor: '#F5C518',\n    paddingTop: 20,\n    paddingBottom: 20,\n    paddingHorizontal: 20,\n    elevation: 4,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84\n  },\n  imdbTitle: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#000',\n    textAlign: 'center',\n    marginBottom: 16,\n    letterSpacing: 2\n  },\n  searchContainer: {\n    position: 'relative',\n    zIndex: 9999\n  },\n  searchInput: {\n    backgroundColor: '#fff',\n    borderRadius: 25,\n    paddingHorizontal: 20,\n    paddingVertical: 12,\n    fontSize: 16,\n    color: '#000',\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 2\n  },\n  searchSpinner: {\n    position: 'absolute',\n    right: 15,\n    top: 12\n  },\n  searchDropdownOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    zIndex: 999999,\n    elevation: 999999\n  },\n  searchDropdown: {\n    position: 'absolute',\n    top: '100%',\n    left: 0,\n    right: 0,\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    marginTop: 8,\n    elevation: 8,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n    maxHeight: 300,\n    zIndex: 999999\n  },\n  searchResultItem: {\n    paddingHorizontal: 20,\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: '#f0f0f0',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  searchResultTitle: {\n    fontSize: 16,\n    color: '#000',\n    fontWeight: '500',\n    flex: 1\n  },\n  searchResultYear: {\n    fontSize: 14,\n    color: '#666',\n    marginLeft: 12\n  },\n  featuredSection: {\n    marginBottom: 30\n  },\n  featuredHeader: {\n    paddingHorizontal: 20,\n    marginBottom: 16,\n    alignItems: 'center'\n  },\n  featuredTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 4\n  },\n  featuredSubtitle: {\n    fontSize: 14,\n    color: '#888',\n    textAlign: 'center'\n  },\n  genresList: {\n    paddingBottom: 20\n  },\n  genreSection: {\n    marginBottom: 30\n  },\n  genreHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n    marginBottom: 16\n  },\n  genreTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  genreTitle: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginRight: 12\n  },\n  movieCount: {\n    fontSize: 14,\n    color: '#888'\n  },\n  moviesRow: {\n    paddingHorizontal: 20\n  },\n  moviePoster: {\n    width: POSTER_WIDTH,\n    height: POSTER_HEIGHT,\n    marginRight: 16,\n    borderRadius: 12,\n    overflow: 'hidden',\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    position: 'relative'\n  },\n  posterImage: {\n    width: '100%',\n    height: '100%'\n  },\n  ratingBadge: {\n    position: 'absolute',\n    top: 8,\n    right: 8,\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#FFD700'\n  },\n  ratingText: {\n    fontSize: 12,\n    fontWeight: 'bold',\n    color: '#FFD700'\n  },\n  posterOverlay: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: 'rgba(0,0,0,0.9)',\n    padding: 12\n  },\n  movieTitle: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 6,\n    textAlign: 'center',\n    lineHeight: 16\n  },\n  movieMeta: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  movieYear: {\n    fontSize: 11,\n    color: '#ccc',\n    fontWeight: '500'\n  },\n  movieRating: {\n    fontSize: 11,\n    color: '#FFD700',\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","View","Text","StyleSheet","ScrollView","TouchableOpacity","Image","ActivityIndicator","Dimensions","FlatList","TextInput","SafeAreaView","getGenres","getMoviesByGenre","searchMovies","getTopRatedMovies","getMovieDetails","getMoviesByIds","socketService","MovieModal","getPriorityMoviesByGenre","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","width","POSTER_WIDTH","POSTER_HEIGHT","HomeScreen","_ref","navigation","_useState","_useState2","_slicedToArray","genres","setGenres","_useState3","_useState4","moviesByGenre","setMoviesByGenre","_useState5","_useState6","loading","setLoading","_useState7","_useState8","selectedMovie","setSelectedMovie","_useState9","_useState0","modalVisible","setModalVisible","_useState1","_useState10","searchQuery","setSearchQuery","_useState11","_useState12","searchResults","setSearchResults","_useState13","_useState14","isSearching","setIsSearching","_useState15","_useState16","featuredMovies","setFeaturedMovies","loadGenresAndMovies","setupSocketConnection","disconnect","connect","onMovieSelected","movie","console","log","_ref2","_asyncToGenerator","topMovies","allTimeTopMovies","sort","a","b","vote_average","slice","length","map","m","title","error","genresData","moviesData","usedMovieIds","Set","filteredGenres","filter","genre","name","priorityGenres","sortedGenres","_toConsumableArray","aPriority","indexOf","bPriority","familyGenre","find","g","animationGenre","priorityMoviesForGenre","finalGenreMovies","priorityMovieIds","tmdbId","priorityMovies","forEach","add","id","allMovies","familyMovies","concat","animationMovies","uniqueMovies","index","self","findIndex","remainingSlots","additionalMovies","has","apply","arguments","handleMoviePress","selectMovie","handleSearch","_ref3","query","trim","results","_x","renderMoviePoster","_ref4","item","style","styles","moviePoster","onPress","activeOpacity","children","source","uri","poster_path","posterImage","resizeMode","ratingBadge","ratingText","toFixed","posterOverlay","movieTitle","numberOfLines","renderGenreSection","_ref5","genreKey","displayName","movies","genreSection","genreHeader","genreTitleRow","genreTitle","movieCount","data","renderItem","keyExtractor","toString","horizontal","showsHorizontalScrollIndicator","contentContainerStyle","moviesRow","snapToInterval","decelerationRate","renderFeaturedMovies","featuredSection","featuredHeader","featuredTitle","featuredSubtitle","loadingContainer","size","color","loadingText","container","imdbHeader","imdbTitle","searchContainer","searchInput","placeholder","placeholderTextColor","value","onChangeText","autoCapitalize","autoCorrect","searchSpinner","searchDropdownOverlay","searchDropdown","_ref6","searchResultItem","searchResultTitle","searchResultYear","Date","release_date","getFullYear","showsVerticalScrollIndicator","nestedScrollEnabled","_ref7","genresList","onRefresh","refreshing","visible","onClose","create","flex","backgroundColor","justifyContent","alignItems","marginTop","fontSize","paddingTop","paddingBottom","paddingHorizontal","elevation","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","fontWeight","textAlign","marginBottom","letterSpacing","position","zIndex","borderRadius","paddingVertical","right","top","left","bottom","maxHeight","borderBottomWidth","borderBottomColor","flexDirection","marginLeft","marginRight","overflow","borderWidth","borderColor","padding","lineHeight","movieMeta","movieYear","movieRating"],"sources":["/Users/francescaforzoni/Downloads/Dad_MagicApp_002/src/screens/HomeScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  Image,\n  ActivityIndicator,\n  Dimensions,\n  FlatList,\n  TextInput,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { getGenres, getMoviesByGenre, searchMovies, getTopRatedMovies, getMovieDetails, getMoviesByIds } from '../services/tmdbService';\nimport { socketService } from '../services/socketService';\nimport MovieModal from '../components/MovieModal';\nimport { getPriorityMoviesByGenre } from '../data/priorityMovies';\n\nconst { width } = Dimensions.get('window');\nconst POSTER_WIDTH = 156; // 30% larger (120 * 1.3)\nconst POSTER_HEIGHT = 234; // 30% larger (180 * 1.3)\n\nexport default function HomeScreen({ navigation }) {\n  const [genres, setGenres] = useState([]);\n  const [moviesByGenre, setMoviesByGenre] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [featuredMovies, setFeaturedMovies] = useState([]);\n\n  useEffect(() => {\n    loadGenresAndMovies();\n    setupSocketConnection();\n    \n    return () => {\n      socketService.disconnect();\n    };\n  }, []);\n\n  const setupSocketConnection = () => {\n    socketService.connect();\n    socketService.onMovieSelected((movie) => {\n      console.log('Movie selected by customer:', movie);\n    });\n  };\n\n  const loadGenresAndMovies = async () => {\n    try {\n      setLoading(true);\n      \n      // Get top 10 highest-rated movies of all time for featured section\n      try {\n        const topMovies = await getTopRatedMovies(1, 50); // Get more movies to choose from\n        const allTimeTopMovies = topMovies\n          .sort((a, b) => b.vote_average - a.vote_average) // Sort by rating (highest first)\n          .slice(0, 10); // Take top 10\n        console.log('Loaded featured movies:', allTimeTopMovies.length, allTimeTopMovies.map(m => m.title));\n        setFeaturedMovies(allTimeTopMovies);\n      } catch (error) {\n        console.error('Error loading featured movies:', error);\n        setFeaturedMovies([]);\n      }\n      \n      // Get all genres\n      const genresData = await getGenres();\n      setGenres(genresData);\n      \n      // Load movies for each genre and ensure no duplicates\n      const moviesData = {};\n      const usedMovieIds = new Set(); // Track which movies have been assigned\n      \n      // Filter out unwanted genres and combine Family & Animation\n      const filteredGenres = genresData.filter(genre => \n        genre.name !== 'Documentary' && \n        genre.name !== 'TV Movie'\n      );\n      \n      // Sort genres by popularity/importance to prioritize them\n      const priorityGenres = ['Action', 'Comedy', 'Drama', 'Thriller', 'Horror', 'Romance', 'Adventure', 'Sci-Fi', 'Family & Animation', 'Fantasy', 'Musical', 'Crime'];\n      const sortedGenres = [...filteredGenres].sort((a, b) => {\n        const aPriority = priorityGenres.indexOf(a.name);\n        const bPriority = priorityGenres.indexOf(b.name);\n        if (aPriority === -1 && bPriority === -1) return 0;\n        if (aPriority === -1) return 1;\n        if (bPriority === -1) return -1;\n        return aPriority - bPriority;\n      });\n      \n      // Handle Family & Animation combination first\n      const familyGenre = filteredGenres.find(g => g.name === 'Family');\n      const animationGenre = filteredGenres.find(g => g.name === 'Animation');\n      \n      if (familyGenre || animationGenre) {\n        try {\n          // Get priority movies for Family & Animation first\n          const priorityMoviesForGenre = getPriorityMoviesByGenre('Family & Animation');\n          let finalGenreMovies = [];\n          \n          if (priorityMoviesForGenre.length > 0) {\n            const priorityMovieIds = priorityMoviesForGenre.map(movie => movie.tmdbId);\n            const priorityMovies = await getMoviesByIds(priorityMovieIds);\n            finalGenreMovies = priorityMovies;\n            priorityMovies.forEach(movie => usedMovieIds.add(movie.id));\n          }\n          \n          // Get regular movies from both genres\n          let allMovies = [];\n          if (familyGenre) {\n            const familyMovies = await getMoviesByGenre(familyGenre.id, 1, 50);\n            allMovies = [...allMovies, ...familyMovies];\n          }\n          \n          if (animationGenre) {\n            const animationMovies = await getMoviesByGenre(animationGenre.id, 1, 50);\n            allMovies = [...allMovies, ...animationMovies];\n          }\n          \n          // Remove duplicates\n          const uniqueMovies = allMovies.filter((movie, index, self) => \n            index === self.findIndex(m => m.id === movie.id)\n          );\n          \n          // Add remaining available movies (up to 50 total)\n          const remainingSlots = 50 - finalGenreMovies.length;\n          const additionalMovies = uniqueMovies\n            .filter(movie => !usedMovieIds.has(movie.id))\n            .slice(0, remainingSlots);\n          \n          finalGenreMovies = [...finalGenreMovies, ...additionalMovies];\n          \n          // Mark additional movies as used\n          additionalMovies.forEach(movie => usedMovieIds.add(movie.id));\n          \n          moviesData['Family & Animation'] = finalGenreMovies;\n        } catch (error) {\n          console.error('Error loading Family & Animation movies:', error);\n          moviesData['Family & Animation'] = [];\n        }\n      }\n      \n      // Process other genres\n      for (const genre of sortedGenres) {\n        // Skip Family and Animation as they're handled above\n        if (genre.name === 'Family' || genre.name === 'Animation') {\n          continue;\n        }\n        \n        try {\n          // Get priority movies for this genre first\n          const priorityMoviesForGenre = getPriorityMoviesByGenre(genre.name);\n          \n          // Fetch priority movies directly by their IDs to guarantee they appear\n          let finalGenreMovies = [];\n          if (priorityMoviesForGenre.length > 0) {\n            const priorityMovieIds = priorityMoviesForGenre.map(movie => movie.tmdbId);\n            const priorityMovies = await getMoviesByIds(priorityMovieIds);\n            finalGenreMovies = priorityMovies;\n            priorityMovies.forEach(movie => usedMovieIds.add(movie.id));\n          }\n          \n          // Get regular movies for this genre\n          const allMovies = await getMoviesByGenre(genre.id, 1, 100);\n          \n          // Add remaining available movies (up to 50 total)\n          const remainingSlots = 50 - finalGenreMovies.length;\n          const additionalMovies = allMovies\n            .filter(movie => !usedMovieIds.has(movie.id))\n            .slice(0, remainingSlots);\n          \n          finalGenreMovies = [...finalGenreMovies, ...additionalMovies];\n          \n          // Mark additional movies as used\n          additionalMovies.forEach(movie => usedMovieIds.add(movie.id));\n          \n          moviesData[genre.id] = finalGenreMovies;\n        } catch (error) {\n          console.error(`Error loading movies for genre ${genre.name}:`, error);\n          moviesData[genre.id] = [];\n        }\n      }\n      \n      setMoviesByGenre(moviesData);\n    } catch (error) {\n      console.error('Error loading data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleMoviePress = (movie) => {\n    setSelectedMovie(movie);\n    setModalVisible(true);\n    \n    // Send movie selection to magician app via socket\n    socketService.selectMovie(movie);\n  };\n\n  const handleSearch = async (query) => {\n    setSearchQuery(query);\n    \n    if (query.trim().length === 0) {\n      setSearchResults([]);\n      setIsSearching(false);\n      return;\n    }\n    \n    if (query.trim().length < 2) {\n      setSearchResults([]);\n      return;\n    }\n    \n    setIsSearching(true);\n    try {\n      const results = await searchMovies(query, 1);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Error searching movies:', error);\n      setSearchResults([]);\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const renderMoviePoster = ({ item }) => (\n    <TouchableOpacity\n      style={styles.moviePoster}\n      onPress={() => handleMoviePress(item)}\n      activeOpacity={0.7}\n    >\n      <Image\n        source={{\n          uri: `https://image.tmdb.org/t/p/w500${item.poster_path}`,\n        }}\n        style={styles.posterImage}\n        resizeMode=\"cover\"\n      />\n      \n      {/* Rating Badge */}\n      {item.vote_average && (\n        <View style={styles.ratingBadge}>\n          <Text style={styles.ratingText}>\n            ★ {item.vote_average.toFixed(1)}\n          </Text>\n        </View>\n      )}\n      \n      {/* Movie Info Overlay */}\n      <View style={styles.posterOverlay}>\n        <Text style={styles.movieTitle} numberOfLines={2}>\n          {item.title}\n        </Text>\n      </View>\n    </TouchableOpacity>\n  );\n\n  const renderGenreSection = ({ item: genre }) => {\n    // Handle combined Family & Animation genre\n    let genreKey;\n    let displayName;\n    \n    if (genre.name === 'Family' || genre.name === 'Animation') {\n      genreKey = 'Family & Animation';\n      displayName = 'Family & Animation';\n    } else {\n      genreKey = genre.id;\n      displayName = genre.name;\n    }\n    \n    const movies = moviesByGenre[genreKey] || [];\n    \n    if (movies.length === 0) return null;\n\n    return (\n      <View style={styles.genreSection}>\n        <View style={styles.genreHeader}>\n          <View style={styles.genreTitleRow}>\n            <Text style={styles.genreTitle}>\n              {displayName}\n            </Text>\n          </View>\n          <Text style={styles.movieCount}>{movies.length} movies</Text>\n        </View>\n        \n        <FlatList\n          data={movies}\n          renderItem={renderMoviePoster}\n          keyExtractor={(movie) => movie.id.toString()}\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          contentContainerStyle={styles.moviesRow}\n          snapToInterval={POSTER_WIDTH + 16}\n          decelerationRate=\"fast\"\n        />\n      </View>\n    );\n  };\n\n\n\n  const renderFeaturedMovies = () => {\n    console.log('Rendering Featured Movies, featuredMovies length:', featuredMovies.length);\n    if (featuredMovies.length === 0) {\n      console.log('No featured movies to display');\n      return null;\n    }\n\n    return (\n      <View style={styles.featuredSection}>\n        <View style={styles.featuredHeader}>\n          <Text style={styles.featuredTitle}>Featured Movies</Text>\n          <Text style={styles.featuredSubtitle}>Top 10 Highest-Rated Films of All Time</Text>\n        </View>\n        \n        <FlatList\n          data={featuredMovies}\n          renderItem={renderMoviePoster}\n          keyExtractor={(movie) => movie.id.toString()}\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          contentContainerStyle={styles.moviesRow}\n          snapToInterval={POSTER_WIDTH + 16}\n          decelerationRate=\"fast\"\n        />\n      </View>\n    );\n  };\n\n\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color=\"#007AFF\" />\n        <Text style={styles.loadingText}>Loading movies...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* Yellow IMDB Header */}\n      <View style={styles.imdbHeader}>\n        <Text style={styles.imdbTitle}>IMBD</Text>\n        <View style={styles.searchContainer}>\n          <TextInput\n            style={styles.searchInput}\n            placeholder=\"Search movies...\"\n            placeholderTextColor=\"#999\"\n            value={searchQuery}\n            onChangeText={handleSearch}\n            autoCapitalize=\"none\"\n            autoCorrect={false}\n          />\n          {isSearching && (\n            <ActivityIndicator size=\"small\" color=\"#000\" style={styles.searchSpinner} />\n          )}\n          \n          {/* Search Results Dropdown */}\n          {searchQuery.trim().length > 0 && searchResults.length > 0 && (\n            <View style={styles.searchDropdownOverlay}>\n              <View style={styles.searchDropdown}>\n                <FlatList\n                  data={searchResults.slice(0, 8)} // Show max 8 results\n                  renderItem={({ item }) => (\n                    <TouchableOpacity\n                      style={styles.searchResultItem}\n                      onPress={() => {\n                        setSearchQuery('');\n                        setSearchResults([]);\n                        handleMoviePress(item);\n                      }}\n                    >\n                      <Text style={styles.searchResultTitle}>{item.title}</Text>\n                      <Text style={styles.searchResultYear}>\n                        {new Date(item.release_date).getFullYear()}\n                      </Text>\n                    </TouchableOpacity>\n                  )}\n                  keyExtractor={(item) => item.id.toString()}\n                  showsVerticalScrollIndicator={false}\n                  nestedScrollEnabled={true}\n                />\n              </View>\n            </View>\n          )}\n        </View>\n      </View>\n      \n      {/* Content - Always show genres, search only shows dropdown */}\n      <FlatList\n        data={['featured', ...genres]} // Add featured section at the top\n        renderItem={({ item, index }) => {\n          if (item === 'featured') {\n            return renderFeaturedMovies();\n          }\n          return renderGenreSection({ item });\n        }}\n        keyExtractor={(item, index) => {\n          if (item === 'featured') return 'featured';\n          return item.id.toString();\n        }}\n        showsVerticalScrollIndicator={false}\n        contentContainerStyle={styles.genresList}\n        onRefresh={loadGenresAndMovies}\n        refreshing={loading}\n      />\n\n      <MovieModal\n        visible={modalVisible}\n        movie={selectedMovie}\n        onClose={() => {\n          setModalVisible(false);\n          setSelectedMovie(null);\n        }}\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0a0a0a',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#0a0a0a',\n  },\n  loadingText: {\n    color: '#fff',\n    marginTop: 16,\n    fontSize: 16,\n  },\n  imdbHeader: {\n    backgroundColor: '#F5C518', // IMDB yellow\n    paddingTop: 20,\n    paddingBottom: 20,\n    paddingHorizontal: 20,\n    elevation: 4,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n  },\n  imdbTitle: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#000',\n    textAlign: 'center',\n    marginBottom: 16,\n    letterSpacing: 2,\n  },\n  searchContainer: {\n    position: 'relative',\n    zIndex: 9999,\n  },\n  searchInput: {\n    backgroundColor: '#fff',\n    borderRadius: 25,\n    paddingHorizontal: 20,\n    paddingVertical: 12,\n    fontSize: 16,\n    color: '#000',\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.2,\n    shadowRadius: 2,\n  },\n  searchSpinner: {\n    position: 'absolute',\n    right: 15,\n    top: 12,\n  },\n  searchDropdownOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    zIndex: 999999,\n    elevation: 999999,\n  },\n  searchDropdown: {\n    position: 'absolute',\n    top: '100%',\n    left: 0,\n    right: 0,\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    marginTop: 8,\n    elevation: 8,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n    maxHeight: 300,\n    zIndex: 999999,\n  },\n  searchResultItem: {\n    paddingHorizontal: 20,\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: '#f0f0f0',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  searchResultTitle: {\n    fontSize: 16,\n    color: '#000',\n    fontWeight: '500',\n    flex: 1,\n  },\n  searchResultYear: {\n    fontSize: 14,\n    color: '#666',\n    marginLeft: 12,\n  },\n\n  featuredSection: {\n    marginBottom: 30,\n  },\n  featuredHeader: {\n    paddingHorizontal: 20,\n    marginBottom: 16,\n    alignItems: 'center',\n  },\n  featuredTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 4,\n  },\n  featuredSubtitle: {\n    fontSize: 14,\n    color: '#888',\n    textAlign: 'center',\n  },\n  genresList: {\n    paddingBottom: 20,\n  },\n  genreSection: {\n    marginBottom: 30,\n  },\n  genreHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n    marginBottom: 16,\n  },\n  genreTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  genreTitle: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginRight: 12,\n  },\n\n  movieCount: {\n    fontSize: 14,\n    color: '#888',\n  },\n  moviesRow: {\n    paddingHorizontal: 20,\n  },\n  moviePoster: {\n    width: POSTER_WIDTH,\n    height: POSTER_HEIGHT,\n    marginRight: 16,\n    borderRadius: 12,\n    overflow: 'hidden',\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    position: 'relative',\n  },\n  posterImage: {\n    width: '100%',\n    height: '100%',\n  },\n  ratingBadge: {\n    position: 'absolute',\n    top: 8,\n    right: 8,\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#FFD700',\n  },\n  ratingText: {\n    fontSize: 12,\n    fontWeight: 'bold',\n    color: '#FFD700',\n  },\n  posterOverlay: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: 'rgba(0,0,0,0.9)',\n    padding: 12,\n  },\n  movieTitle: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 6,\n    textAlign: 'center',\n    lineHeight: 16,\n  },\n  movieMeta: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  movieYear: {\n    fontSize: 11,\n    color: '#ccc',\n    fontWeight: '500',\n  },\n  movieRating: {\n    fontSize: 11,\n    color: '#FFD700',\n    fontWeight: 'bold',\n  },\n\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}