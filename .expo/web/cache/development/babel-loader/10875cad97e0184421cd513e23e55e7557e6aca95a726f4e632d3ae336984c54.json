{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport axios from 'axios';\nvar TMDB_BASE_URL = 'https://api.themoviedb.org/3';\nvar TMDB_API_KEY = '462b797169ca3170f8971775670b86ac';\nvar tmdbApi = axios.create({\n  baseURL: TMDB_BASE_URL,\n  params: {\n    api_key: TMDB_API_KEY,\n    language: 'en-US'\n  }\n});\nexport var getGenres = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var response = yield tmdbApi.get('/genre/movie/list');\n      var genres = response.data.genres;\n      var genresWithCount = yield Promise.all(genres.map(function () {\n        var _ref2 = _asyncToGenerator(function* (genre) {\n          try {\n            var moviesResponse = yield tmdbApi.get('/discover/movie', {\n              params: {\n                with_genres: genre.id,\n                page: 1\n              }\n            });\n            return _objectSpread(_objectSpread({}, genre), {}, {\n              movieCount: moviesResponse.data.total_results\n            });\n          } catch (error) {\n            console.error(`Error getting count for genre ${genre.name}:`, error);\n            return _objectSpread(_objectSpread({}, genre), {}, {\n              movieCount: 0\n            });\n          }\n        });\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n      return genresWithCount;\n    } catch (error) {\n      console.error('Error fetching genres:', error);\n      throw error;\n    }\n  });\n  return function getGenres() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getMoviesByGenre = function () {\n  var _ref3 = _asyncToGenerator(function* (genreId) {\n    var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    try {\n      var response = yield tmdbApi.get('/discover/movie', {\n        params: {\n          with_genres: genreId,\n          sort_by: 'popularity.desc',\n          page: page,\n          include_adult: false,\n          include_video: false\n        }\n      });\n      return response.data.results;\n    } catch (error) {\n      console.error('Error fetching movies by genre:', error);\n      throw error;\n    }\n  });\n  return function getMoviesByGenre(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getMovieDetails = function () {\n  var _ref4 = _asyncToGenerator(function* (movieId) {\n    try {\n      var response = yield tmdbApi.get(`/movie/${movieId}`, {\n        params: {\n          append_to_response: 'credits,videos,images'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching movie details:', error);\n      throw error;\n    }\n  });\n  return function getMovieDetails(_x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var searchMovies = function () {\n  var _ref5 = _asyncToGenerator(function* (query) {\n    var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    try {\n      var response = yield tmdbApi.get('/search/movie', {\n        params: {\n          query: query,\n          page: page,\n          include_adult: false\n        }\n      });\n      return response.data.results;\n    } catch (error) {\n      console.error('Error searching movies:', error);\n      throw error;\n    }\n  });\n  return function searchMovies(_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getPopularMovies = function () {\n  var _ref6 = _asyncToGenerator(function* () {\n    var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    try {\n      var response = yield tmdbApi.get('/movie/popular', {\n        params: {\n          page: page\n        }\n      });\n      return response.data.results;\n    } catch (error) {\n      console.error('Error fetching popular movies:', error);\n      throw error;\n    }\n  });\n  return function getPopularMovies() {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var getTopRatedMovies = function () {\n  var _ref7 = _asyncToGenerator(function* () {\n    var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    try {\n      var response = yield tmdbApi.get('/movie/top_rated', {\n        params: {\n          page: page\n        }\n      });\n      return response.data.results;\n    } catch (error) {\n      console.error('Error fetching top rated movies:', error);\n      throw error;\n    }\n  });\n  return function getTopRatedMovies() {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var getUpcomingMovies = function () {\n  var _ref8 = _asyncToGenerator(function* () {\n    var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    try {\n      var response = yield tmdbApi.get('/movie/upcoming', {\n        params: {\n          page: page\n        }\n      });\n      return response.data.results;\n    } catch (error) {\n      console.error('Error fetching upcoming movies:', error);\n      throw error;\n    }\n  });\n  return function getUpcomingMovies() {\n    return _ref8.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["axios","TMDB_BASE_URL","TMDB_API_KEY","tmdbApi","create","baseURL","params","api_key","language","getGenres","_ref","_asyncToGenerator","response","get","genres","data","genresWithCount","Promise","all","map","_ref2","genre","moviesResponse","with_genres","id","page","_objectSpread","movieCount","total_results","error","console","name","_x","apply","arguments","getMoviesByGenre","_ref3","genreId","length","undefined","sort_by","include_adult","include_video","results","_x2","getMovieDetails","_ref4","movieId","append_to_response","_x3","searchMovies","_ref5","query","_x4","getPopularMovies","_ref6","getTopRatedMovies","_ref7","getUpcomingMovies","_ref8"],"sources":["/Users/francescaforzoni/Downloads/Dad_MagicApp_002/src/services/tmdbService.js"],"sourcesContent":["import axios from 'axios';\n\n// TMDB API Configuration\nconst TMDB_BASE_URL = 'https://api.themoviedb.org/3';\nconst TMDB_API_KEY = '462b797169ca3170f8971775670b86ac'; // Your actual API key\n\n// Create axios instance with base configuration\nconst tmdbApi = axios.create({\n  baseURL: TMDB_BASE_URL,\n  params: {\n    api_key: TMDB_API_KEY,\n    language: 'en-US',\n  },\n});\n\n// Get all movie genres\nexport const getGenres = async () => {\n  try {\n    const response = await tmdbApi.get('/genre/movie/list');\n    const genres = response.data.genres;\n    \n    // Get movie count for each genre (optional enhancement)\n    const genresWithCount = await Promise.all(\n      genres.map(async (genre) => {\n        try {\n          const moviesResponse = await tmdbApi.get('/discover/movie', {\n            params: {\n              with_genres: genre.id,\n              page: 1,\n            },\n          });\n          return {\n            ...genre,\n            movieCount: moviesResponse.data.total_results,\n          };\n        } catch (error) {\n          console.error(`Error getting count for genre ${genre.name}:`, error);\n          return { ...genre, movieCount: 0 };\n        }\n      })\n    );\n    \n    return genresWithCount;\n  } catch (error) {\n    console.error('Error fetching genres:', error);\n    throw error;\n  }\n};\n\n// Get movies by genre\nexport const getMoviesByGenre = async (genreId, page = 1) => {\n  try {\n    const response = await tmdbApi.get('/discover/movie', {\n      params: {\n        with_genres: genreId,\n        sort_by: 'popularity.desc',\n        page: page,\n        include_adult: false,\n        include_video: false,\n      },\n    });\n    \n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching movies by genre:', error);\n    throw error;\n  }\n};\n\n// Get movie details by ID\nexport const getMovieDetails = async (movieId) => {\n  try {\n    const response = await tmdbApi.get(`/movie/${movieId}`, {\n      params: {\n        append_to_response: 'credits,videos,images',\n      },\n    });\n    \n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    throw error;\n  }\n};\n\n// Search movies\nexport const searchMovies = async (query, page = 1) => {\n  try {\n    const response = await tmdbApi.get('/search/movie', {\n      params: {\n        query: query,\n        page: page,\n        include_adult: false,\n      },\n    });\n    \n    return response.data.results;\n  } catch (error) {\n    console.error('Error searching movies:', error);\n    throw error;\n  }\n};\n\n// Get popular movies\nexport const getPopularMovies = async (page = 1) => {\n  try {\n    const response = await tmdbApi.get('/movie/popular', {\n      params: {\n        page: page,\n      },\n    });\n    \n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching popular movies:', error);\n    throw error;\n  }\n};\n\n// Get top rated movies\nexport const getTopRatedMovies = async (page = 1) => {\n  try {\n    const response = await tmdbApi.get('/movie/top_rated', {\n      params: {\n        page: page,\n      },\n    });\n    \n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching top rated movies:', error);\n    throw error;\n  }\n};\n\n// Get upcoming movies\nexport const getUpcomingMovies = async (page = 1) => {\n  try {\n    const response = await tmdbApi.get('/movie/upcoming', {\n      params: {\n        page: page,\n      },\n    });\n    \n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching upcoming movies:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}